// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// #
// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// #

#include "UziScalperBot.hh"

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
// #
#ifdef INTERFACE

#include "QuantBasic_DESIGN_CHOICES.hh"
#include "QuantSuit.hh"
#include "QTA.hh"

#undef DEBUG_BUF_ONEOFF
#undef TEST_ONLY_ONE_BASE_PERIODIZATION

constexpr Z SIMULATED_TIME_UNCERTAINTY = 100;

template <class T>
inline bool has(N val, T& obj) {
    return N(val) <= obj.count();
}

template <class T>
inline bool not_yet(N val, T& obj) {
    return N(val) > obj.count();
}

typedef QuantReal QR;
using namespace QTA;

template <bool PLOTTING_USED>
class ZarScalperBot final : public QuantStudyContext<PLOTTING_USED> {
    using parent = QuantStudyContext<PLOTTING_USED>;
    using self = ZarScalperBot<PLOTTING_USED>;

    using parent::plot;
    using parent::plot_ohlc;
    using parent::close_plot_lap;

   public:
    string main_symbol;
    string symbol2;

    /*


    *TODO*

    // one of these..

    TradeDeskAbstract broker;
    BrokerAccount broker;



    */


    QuantFeed<self> main_feed;
    QuantPeriodization<self> ps;

    QuantPeriodization<self> pm;
    Ema ema_ask;
    Ema ema_bid;
    Ema ema50pm;
    Ema ema200pm;
    // PeriodTickMean         meanpm;
    PeriodTickMean mean_ask;
    PeriodTickMean mean_bid;
    Highest highestpm;
    Lowest lowestpm;
    Highest highestpmlong;
    Lowest lowestpmlong;

    QuantPeriodization<self> pl;

    QuantFeed<self> feed2nd;
    /*
    QuantFeed<self>             main_feed2;
    QuantFeed<self>             main_feed3;
    */

    // QuantFeed           *main_joint_feed;
    N handled_ticks_count = 0;
    N handled_ticks_count2 = 0;
    QR avg_roc = 0;
    QR max_roc = 0;
    Z one_byter_roc_delta = 0;
    Z two_byter_roc_delta = 0;
    Z three_byter_roc_delta = 0;
    Z four_byter_roc_delta = 0;
    Z b12_byter_roc_delta = 0;
    QR floatingEURUSD = 0;

#ifdef IS_DEBUG
    bool do_debug_the_time = false;
#else
    constexpr static bool do_debug_the_time = false;
#endif

    // *TODO* (StrategyInstance)
    ZarScalperBot(HashTree& conf)
        : parent(conf)
        , main_symbol(
              param("main_symbol", "_CRASH_ME_", "Main instrument symbol"))
        , // title = "Main instrument symbol"
        symbol2(param("symbol2", "EURUSD", "Complementary instrument symbol"))
        , // title = "Main
          // instrument symbol"

        /*
            // *TODO* -
            broker(param("main_broker_id", "_CRASH_ME_", "Main broker"),
                   param("username", "_ANON_", "Username"),
                   param("pass", "_XXX_", "T23M User Password")
                   )
                   */
        main_feed(param("main_broker_id", "_CRASH_ME_", "Main broker"),
                  main_symbol, 10)
        ,
        // ps { .05, main_feed },
        // pm { 1, ps },
        ps(param("fast_period", 0.47, "'Fast' period"), main_feed)
        , pm(param("pm_period_len", 0.50, "'1 minute' period"), ps)
        ,
        // pm          { param( "pm_period_len", 5.0, "'1 minute' period" ), ps
        // },
        ema_ask(param("ask_tick_ema_len", 50, "Ask Tick EMA length"))
        , ema_bid(param("bid_tick_ema_len", 50, "Bid Tick EMA length"))
        ,
        // ema_ask { param( "ask_tick_ema_len", 1600, "Ask Tick EMA length" ) },
        // ema_bid { param( "bid_tick_ema_len", 1600, "Bid Tick EMA length" ) },
        ema50pm(param("fast_ema_len", 2, "Fast EMA length"))
        , ema200pm(param("mid_ema_len", 200, "Mid EMA length"))
        ,
        // meanpm { },
        mean_ask()
        , mean_bid()
        , highestpm(param("highest_len", 5, "Highest length"))
        , lowestpm(param("lowest_len", 5, "Lowest length"))
        , highestpmlong(param("highest_long_len", 100, "Highest Long length"))
        , lowestpmlong(param("lowest_long_len", 100, "Lowest Long length"))
        , pl(param("pl_period_len", 240.0, "'4 hour' period"), pm)
        ,

        /*
        main_feed2 { "OANDA", main_symbol, 4 },
        main_feed3 { "OANDA", main_symbol, 4 }
        */
        feed2nd{ "DUKASCOPY_RAW", symbol2, 3 } {
        cerr << "\nZarScalperBot::ZarScalperBot constructor"
             << "\n\n";
    }

    ~ZarScalperBot() {
        cerr << "\n\n";
        cerr << "- - - - - -- - - - - - - - - - - - - "
             << "\n";
        cerr << "ZarScalperBot >> >>> DESTRUCTOQR <<< <<"
             << "\n";
        cerr << "floatingEURUSD = " << floatingEURUSD << "\n";
        cerr << "Avg ROC: " << avg_roc * 100000 << "\n";
        cerr << "Max ROC: " << max_roc * 100000 << "\n";
        cerr << "\n";
        cerr << "Amount of handled ticks: " << handled_ticks_count << "\n";
        cerr << "Amount of raw bytes / ticks: " << (handled_ticks_count * 40) /
                                                       1024 / 1024 << "MB\n";
        cerr << "Amount of handled 2nd feed ticks: " << handled_ticks_count2
             << "\n";
        cerr << "Amount of raw bytes / 2nd feed ticks: "
             << (handled_ticks_count2 * 40) / 1024 / 1024 << "MB\n";
        cerr << "both in raw bytes: "
             << ((handled_ticks_count + handled_ticks_count2) * 40) / 1024 /
                    1024 << "MB\n";
        cerr << "\n";
        cerr << "No. of one_byter_roc_delta: " << one_byter_roc_delta << "\n";
        cerr << "No. of two_byter_roc_delta: " << two_byter_roc_delta << "\n";
        cerr << "No. of three_byter_roc_delta: " << three_byter_roc_delta
             << "\n";
        cerr << "No. of four_byter_roc_delta: " << four_byter_roc_delta << "\n";
        cerr << "Total byte-size compressed: "
             << (one_byter_roc_delta + two_byter_roc_delta * 2 +
                 three_byter_roc_delta * 3 + four_byter_roc_delta * 4) /
                    1024 / 1024 << "MB"
             << "\n";
        cerr << "Total byte-size RAW: "
             << (one_byter_roc_delta * 8 + two_byter_roc_delta * 8 +
                 three_byter_roc_delta * 8 + four_byter_roc_delta * 8) /
                    1024 / 1024 << "MB"
             << "\n";
        // cerr << "No. of 1.5_byter_roc_delta: " << b12_byter_roc_delta <<
        // "\n";
        cerr << "- - - - - -- - - - - - - - - - - - - "
             << "\n";
    }

    auto init() -> void final {
#ifdef DESIGN_CHOICE__HARD_SIGNALS_INSTEAD_OF_LAMBDA_SIGNALS_FOR_PERIODIZATIONS
        ps.onBarClose_T(this, &self::handle_ps);
        pm.onBarClose_T(this, &self::handle_pm);
        pl.onBarClose_T(this, &self::handle_pl);

// pl.onBarClose_T( this, &(decltype(this)::handle_pl) );
#else
        ps.onBarClose([this] { this->handle_ps(); });
        pm.onBarClose([this] { this->handle_pm(); });
        pl.onBarClose([this] { this->handle_pl(); });

#endif

#ifdef DESIGN_CHOICE__HARD_SIGNALS_INSTEAD_OF_LAMBDA_SIGNALS_FOR_FEEDS
        main_feed.onRegulatedTick_T(this, &self::handleTick_T);
        // main_feed2.onRegulatedTick_T( this,
        // &ZarScalperBot<PLOTTING_USED>::handleTick_T );
        feed2nd.onRegulatedTick_T(this, &self::handleTick2_T);
#else
        main_feed.onRegulatedTick([this] {
            this->handleTick_T(this->main_feed);
        });
        // main_feed2.onRegulatedTick( [this] { this->handleTick_T(
        // this->main_feed2
        // ); } );
        feed2nd.onRegulatedTick([this] { this->handleTick2_T(this->feed2nd); });
#endif
    }

    void varint_bytes_counter(R v1, R v2) {
        QR ask_delta = v1 - v2;
        QR ask_delta_abs = abs(ask_delta);

        // QR foo = 100 * ask_delta / feed.ticks[1].ask;
        if (ask_delta_abs > max_roc) {
            max_roc = ask_delta_abs;
        }
        if (ask_delta_abs < 2047) {
            ++b12_byter_roc_delta;
        }
        if (ask_delta_abs < 63) {
            ++one_byter_roc_delta;
        } else if (ask_delta_abs < 8191) {
            ++two_byter_roc_delta;
        } else if (ask_delta_abs < 1048575) {
            ++three_byter_roc_delta;
        } else {
            ++four_byter_roc_delta;
        }

        avg_roc = 0.999 * avg_roc + 0.001 * ask_delta_abs;
    }

    void handleTick2_T(QuantFeedAbstract& feed) {
// cerr << "ZarScalperBot::HARD_FEED: ";
// cerr << feed.ticks[0].last_price;
// cerr << "\n";

#ifdef DESIGN_CHOICE__FEED_TICK_REF_MICRO_OPT_TEST
#define tick feed.ticks()
#else
        QuantTick& t = feed.ticks; // [0];
#define tick t
#endif

        /*
         *
         * *TODO* make an action such as this a warning! (mixing data sources
         * with different size domains...
         *
            ps.handleFeedTick_HARD( feed );
         *
         *
         */

        if (tick.isGhostTick()) return;

        ++handled_ticks_count2;

        floatingEURUSD = floatingEURUSD * 0.9 + tick.ask * 0.1;

        if (not_yet(2, feed.ticks)) // feed.ticks.size < 2 )
            return;

#ifdef IS_DEEPBUG
        varint_bytes_counter(feed.ticks[0].ask * 100000,
                             feed.ticks[1].ask * 100000);
        varint_bytes_counter(feed.ticks[0].bid * 100000,
                             feed.ticks[1].bid * 100000);
        varint_bytes_counter(feed.ticks[0].ask_volume * 100,
                             feed.ticks[1].ask_volume * 100);
        varint_bytes_counter(feed.ticks[0].bid_volume * 100,
                             feed.ticks[1].bid_volume * 100);
#endif
    }

    // void handleTick_T ( QuantFeed< self > &feed ) {
    void handleTick_T(QuantFeedAbstract& feed) {
// cerr << "ZarScalperBot::HARD_FEED: ";
// cerr << feed.ticks[0].last_price;
// cerr << "\n";

#ifdef DESIGN_CHOICE__FEED_TICK_REF_MICRO_OPT_TEST
#define THE_T feed.ticks()
#else
        const QuantTick& t = feed.ticks.last_as_const(); // [0];
#define THE_T t
#endif

        if (THE_T.isGhostTick() == false) {
            _Dn("--> TICK " << THE_T.time.time_of_day());
            mean_ask << THE_T.ask;
            mean_bid << THE_T.bid;
            ema_ask << THE_T.ask;
            ema_bid << THE_T.bid;
            // cerr << "Updates ema50t(" << t.last_price << ")is now: " <<
            // ema50t <<
            // "\n";
        } else {
            _Dn("--> GHOST " << THE_T.time.time_of_day());
        }

        ps.accumulate_from_feed_tick(THE_T);

        if (THE_T.isGhostTick()) return;

        ++handled_ticks_count;

        if (not_yet(2, feed.ticks)) return;

#ifdef IS_DEEPBUG
        // if ( feed.ticks[0].time < feed.ticks[1].time  ) { // pxt::ptime(
        // dt::date( 2014, 4, 10 ), pxt::hours( 0 ) ) )
        //    do_debug_the_time = true;

        varint_bytes_counter(feed.ticks[0].ask * 100000,
                             feed.ticks[1].ask * 100000);
        varint_bytes_counter(feed.ticks[0].bid * 100000,
                             feed.ticks[1].bid * 100000);
        varint_bytes_counter(feed.ticks[0].ask_volume * 100,
                             feed.ticks[1].ask_volume * 100);
        varint_bytes_counter(feed.ticks[0].bid_volume * 100,
                             feed.ticks[1].bid_volume * 100);

        // (feed.ticks[0].time - qts::get_prior_aligned_ts( feed.ticks[0].time,
        // pxt::hours(24) )).to_full_ms()
        R foo_delta =
            R((feed.ticks[0].time - feed.ticks[1].time).total_milliseconds()) /
            SIMULATED_TIME_UNCERTAINTY;
        // cerr << "The time delta is: " << foo_delta << "\n";
        varint_bytes_counter(foo_delta, 0);

// cerr << "roc=" << foo << ", ";
/*
if ( foo > 1.0 ) {
    cerr << "FUCK SHIT BIG DISCREPANCY IN PRICE - > 1% in one tick!!!\n\n";
    debug_a_tick( feed.ticks[1] );
    debug_a_tick( feed.ticks[0] );
    cerr << "\n\n";
}
 */

#endif
    }

    void handle_ps() {
        //_Dn("ZarScalperBot::handle_ps - - - :" << ps.to_str());
        //_Dn("--> on candle(" << ps.getPeriod() << ") " << ps.time().time_of_day());

#ifdef IS_DEBUG
        if (has(2, ps)) {
            if (ps.time[1] == ps.time[0]) {
                _Dn("\n\n\nDuplicated timestamp in ps!!! : " << ps.time << "\n\n\n");
            }
        }
#endif


        #ifndef TEST_ONLY_ONE_BASE_PERIODIZATION
        pm.accumulate_from_source_candle(ps);
        #endif


    }

    void handle_pm() {
        //_Dn("ZarScalperBot::handle_pm - - - :" << pm.to_str());
        //_Dn("--> on candle(" << pm.getPeriod() << ") " << pm.time().time_of_day());

#ifdef IS_DEBUG
        if (has(2, pm)) {
            if (pm.time[1] == pm.time[0]) {
                _Dn("\n\n\nDuplicated timestamp in pm!!! : " << pm.time << "\n\n\n");
            }
        }
#endif

        pl.accumulate_from_source_candle(pm);

        if (not_yet(2, pm)) return;

//#define close pm.close
#define open pm.open
#define high pm.high
#define low pm.low

#if IS_DEEPBUG

        // if ( open < 20 ) {
        if (do_debug_the_time) {
            cerr << "ZarScalperBot::handle_pm - ";
            // cerr << "#" << pm.barCount() << " - ";
            cerr << (pm.time().date().month()) << "-"
                 << (pm.time().date().day()) << " ";
            cerr << (pm.time().time_of_day()) << " - " << pm.to_str();
            cerr << " ticks: " << main_feed.real_tick_count << " / "
                 << main_feed.ghost_tick_count;
            main_feed.reset_debug_counts();

            cerr << " fltEURUSD: " << floatingEURUSD << " / "
                 << handled_ticks_count2;
            handled_ticks_count2 = 0;

            cerr << "\n";

        } else {
            // if ( pm.time > pxt::ptime( dt::date( 2014, 4, 10 ), pxt::hours( 0
            // ) ) )
            // {
            //    do_debug_the_time = true;
            //}
        }

#endif

        ema_ask.produce(); // *BUBBLARE* *TODO*
        ema_bid.commit();  // *BUBBLARE* *TODO*

        ema50pm |= pm.close;
        ema200pm |= pm.close;
        // meanpm |= pm.close;

        mean_ask |= pm.close;
        mean_bid |= pm.close;

        highestpm |= high;
        lowestpm |= low;
        highestpmlong |= high;
        lowestpmlong |= low;

        // assert( meanpm[0] != 0 );
        // assert( mean_ask[0] != 0 );
        // assert( mean_bid[0] != 0 );

        QR dta_50_200 = ema50pm - ema200pm;
        QR dta_c_50 = pm.close - ema50pm;
        // QR angl30 = angle(ema30[0]);
        // cerr << "50-200: " << dta_50_200 << " dta_c_50: " << dta_c_50 <<
        // "\n";

        QR hlc3 = (pm.close + high + low) * (1. / 3);

        auto granular_close = main_feed.ticks().ask;

#ifdef DEBUG_BUF_ONEOFF
#ifdef IS_DEEPBUG

        if (has(2, pm) && has(4, main_feed.ticks)) {
            // if ( pm.count() >= 2 && main_feed.ticks.count() >= 4 ) {
            cerr << "\n"
                 << "pm.close " << pm.close << "  ps.close " << ps.close
                 << "  ps.close[1] " << ps.close[1] << "  feed.ask[0..3] = ["
                 << main_feed.ticks[0].ask << ", " << main_feed.ticks[1].ask
                 << ", " << main_feed.ticks[2].ask << ", "
                 << main_feed.ticks[3].ask << "]"
                 << "";
        }

#endif
#endif

        /*
        assert( pm.close == ps.close );
        assert( granular_close == pm.close );
        */

        // *TODO*
        // is_primed =
        parent::verify_buffers(); // check if all are eligable for "is_primed =
        // true" and that none has "NaN" in [0] ( "encode"
        // NaN with -(SOMETHING_REALLY_BIG) )
        // *TODO*
        // pm.verify_buffers()  - must be buffer_heap bound...

        if (PLOTTING_USED) { // && is_primed ) {
            // plot( high, "high", ( high > high[1] ? "aaffff" : "ffaaff" ), 2,
            // CIRCLE, DASHED, true );
            // plot( low, "low", ( low > low[1] ? "aaffff" : "ffaaff" ), 2,
            // CIRCLE,
            // DASHED, true );

            plot_ohlc(open, high, low, pm.close, "main_instrument", "aaffaa",
                      "ffaaaa", "005500", "550000", true);

            plot(hlc3, "hlc3-c-D",
                 (pm.close > pm.close[1] ? "003300" : "000033"), 1, CIRCLE,
                 DASHED, true);
            // plot( hlc3, "hlc3", "0000ff", 1, CIRCLE, DASHED, true );

            // plot( ema50pm, "ema50", "0000ff", 2, DIAMOND, DOTTED );

            plot(mean_ask, "mean_ask", "00ff00", 1, PLUS);
            // plot( mean_bid, "mean_bid", "ff00ff", 1, PLUS );

            plot(ema_ask, "var_ema_ask", "00ffff", 2, SQUARE);
            // plot( ema_bid, "var_ema_ask", "550088", 2, SQUARE );

            // plot( ( ema_ask + ema_bid ) / 2 , "ema_ask_bid_midpoint",
            // "000055", 2,
            // DASH, DOTTED );

            // plot( ema200pm, "ema200", "ff0000", 3, LINE, DASHED );

            // plot( highestpm, "highest_high", "00aa00", 1, DASH, DASHED );
            // plot( lowestpm, "lowest_low", "aa0000", 1, DASH, DASHED );

            // plot( ( highestpm + lowestpm ) * ( 1.0 / 2.0 ), "mid", "dddddd",
            // 0,
            // CROSS, NONE );

            // this->close_plot_lap( pm.time );
            // QuantStudyContext<PLOTTING_USED>::close_plot_lap( pm.time );

            // plot( ( 1.0 / feed2nd.ticks().ask ) * 15.24, "EURUSD p", "ffaaaa"
            // );
            plot(granular_close, "granular close", "ff00ff");

            close_plot_lap(pm.time);
        }
    }
    void handle_pl() {
        //cerr << "ZarScalperBot::handle<" << pl.getPeriod()
        //     << "> - : " << pl.time() << " " << pl.to_str() << "\n";

        /*
        assert( pl.close == pm.close );
        */
    }
};

#endif

QuantStudyContextAbstract* createStrategy(QuantExecutionContext& exec_space,
                                          HashTree conf) {
    QuantStudyContextAbstract* bot;

    if (exec_space.isBuffersOutputEnabled()) {
        _Dn("Create Plotting ZarScalperBot<true>")
        bot = new ZarScalperBot<true>(conf);
    } else {
        _Dn("Create Optimized ZarScalperBot<false>")
        bot = new ZarScalperBot<false>(conf);
    }

    return bot;
}

V destroyStrategy(QuantStudyContextAbstract* strategy) { delete strategy; }

#define QUANT_STUDY
#include "../ext/T23MFW/src/QuantExecution_standalone_main.cc"
